package dfs;

import java.util.*;
import java.lang.*;
import java.io.*;

class Main {

    static int N;
    static int[][] map;
    static ArrayList<Integer> arr = new ArrayList<>(); // 각 단지의 크기 저장
    static boolean[][] visited;
    static int count; // 하나의 단지 크기 세기


    public static void countConnect() {

        visited = new boolean[N][N];

        for(int i=0; i<N; i++){
            for(int j=0; j<N; j++){
                if(map[i][j] == 1 && !visited[i][j]){
                    count = 0;
                    dfs(i,j);
                    arr.add(count);
                }
            }
        }
        
    }

    public static void dfs(int x, int y){
        visited[x][y] = true;
        count++;

        if(x-1 >= 0 && map[x-1][y] == 1 && !visited[x-1][y]){
            dfs(x-1, y);
        }
        if(x+1 < N && map[x+1][y] == 1 && !visited[x+1][y]){
            dfs(x+1, y);
        }
        if(y-1 >= 0 && map[x][y-1] == 1 && !visited[x][y-1]){
            dfs(x, y-1);
        }
        if(y+1 < N && map[x][y+1] == 1 && !visited[x][y+1]){
            dfs(x, y+1);
        }
        
    }
    
    public static void main(String[] args) throws IOException{

        // 지도크기와 지도 내용 입력받기
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());

        map = new int[N][N];

        for(int i=0; i<N; i++){
            String line = br.readLine();
            for (int j = 0; j<N; j++) {
                map[i][j] = line.charAt(j) - '0';
            }
        }

        // 단지의 개수
        countConnect();

        // 단지갯수 출력, 단지의 크기 오름차순으로 정렬해서 출력
        System.out.println(arr.size());

        Collections.sort(arr)
        
        for(int num : arr){
            System.out.println(num);
        }

    }
}